{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducing the Code AI Repo","text":"<p>Repo is culmination of many experiments and lessons learnt. The documentation contains the notes, and observations. Most of the docs just provide the most used commands that is necessary for using a package or tool.</p>"},{"location":"StartlearningUVpackage/","title":"UV package &amp; Commands","text":"<ul> <li> <p>[x] Make a list of commands and what they do</p> </li> <li> <p>[x] tested uv install python          \ud83d\udca1 <p>uv python find &gt; lead to surprise of finding 3.9 to 3.11 all of which are under</p> <p>/home/uberdev/.local/share/uv/python/</p> <p>uv python install 3.9 &gt; installs in above path</p> <p>uv python uninstall 3.9 &gt; deletes it from the path</p> <ul> <li>[x] tested uv run</li> </ul> <p> \ud83d\udca1 <p>uv run example.py &gt; exec the script</p> <p>uv run \u2014no-project script.py &gt; ignores the pjt environment, doesn\u2019t take your OS environ also</p> <ul> <li>[x] uv add tested</li> </ul> <p> \ud83d\udca1 <p>uv add \u2014srcipt example.py \u2018pandas\u2019 &gt; this adds the \u2018pandas\u2019 on top of the script.py</p> <p>uv add pandas &gt; adds pandas to pyproject.toml</p> <ul> <li>[x] tested uv lock</li> </ul> <p> \ud83d\udca1 <p>uv lock &gt; just uv.lock in the folder</p> <p>uv lock \u2014script script.py &gt; has to add script.py.lock (ensure uv self update is executed)</p> <ul> <li>[x] tested uv tree</li> </ul> <p> \ud83d\udca1 <p>uv tree &gt; provides dep tree on the project</p> <p>uv tree \u2014script script.py &gt; provide dep tree on the script alone</p> <ul> <li>[x] Understand project structure</li> </ul> <p> \ud83d\udca1 <p>uv init &gt; creates the project structure</p> <p>uv sync &gt; updates the .venv with the packages, however pip freeze shows all the packages in the system, which is not correct.</p> <ul> <li>When executed \u2018python script.py\u2019, if the package is not in pyproject.toml then it throws error </li> <li>[ ] Understand how distribution works</li> </ul> <p>Python projects are typically distributed as both source distributions (sdists) and binary distributions (wheels). The former is typically a\u00a0<code>.tar.gz</code>\u00a0or\u00a0<code>.zip</code>\u00a0file containing the project's source code along with some additional metadata, while the latter is a\u00a0<code>.whl</code>\u00a0file containing pre-built artifacts that can be installed directly.</p> <p> \ud83d\udca1 <p>uv build \u2014sdist &gt; builds tar.gz build files</p> <p>uv build \u2014wheel &gt; build binary .whl file</p> <p>uv build &gt; gives both into ./dist folder</p> <ul> <li>[ ] Understandin entry points</li> </ul> <p>https://docs.astral.sh/uv/concepts/projects/config/#entry-points</p> <p> \ud83d\udca1 <p>[project.scripts]</p> <p>hello = \"example:hello\"</p> <p>uv run hello &gt; will execute the hello() function</p> <p>The above did not work, then a bit of digging found below</p> <p>https://docs.astral.sh/uv/concepts/projects/init/#applications</p> <p>The projects are created in a fashion to be packaged or to be used as app</p> <p> \ud83d\udca1 <p>uv init \u2014app testapp</p> <p>which creates the tree like below</p> <p>testapp \u251c\u2500\u2500 main.py \u251c\u2500\u2500 pyproject.toml \u2514\u2500\u2500 README.md</p> <p>When you want the package like those you see in mcp servers</p> <p> \ud83d\udca1 <p>uv init \u2014package testpkg</p> <p>testpkg/ \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 src \u2514\u2500\u2500 testpkg \u2514\u2500\u2500 init.py</p> <p>With the above understanding pushing to the pypi is for another day altogether</p> <p>https://packaging.python.org/en/latest/guides/section-build-and-publish/</p>"},{"location":"flask-mcp-compare/","title":"Flask MCP Server Comparison","text":""},{"location":"flask-mcp-compare/#setting-up-the-environment","title":"Setting up the Environment","text":"<p>Execute the below commands on your terminal / command prompt</p>"},{"location":"flask-mcp-compare/#pre-requisites","title":"Pre Requisites:","text":"<ul> <li>Python</li> <li>Pip</li> <li>Git</li> <li>Anthropic API key</li> </ul> <p>Update the anthropic API key in the .env file</p>"},{"location":"flask-mcp-compare/#steps-to-execute","title":"Steps to execute:","text":"<ol> <li>Clone the repo</li> </ol> <p>git clone https://github.com/insightbuilder/codeai_fusion.git</p> <ol> <li>Change into flask-mcp-compare folder:</li> </ol> <p>cd flask-mcp-compare</p> <ol> <li>Create virtual environment</li> </ol> <p>python -m venv .venv</p> <p>Ensure the .venv folder is created. Add that folder to your .gitignore</p> <ol> <li>Activate virtual environment</li> </ol> <p>source .venv/bin/activate in linux .venv\\Scripts\\activate in windows</p> <ol> <li>Install requirements</li> </ol> <p>pip install -r requirements.txt</p>"},{"location":"flask-mcp-compare/#running-the-flask-app","title":"Running the Flask App","text":"<p>python flaskapp.py</p>"},{"location":"flask-mcp-compare/#running-the-mcp-server","title":"Running the MCP Server","text":"<p>python mcpclient.py mcpserver.py</p>"},{"location":"mcp_excel_server/","title":"MCP Server to Analyze and Work with Excel files","text":"<p>Excel file analysis and automation is a major task done by the knowledge workers across the organisations. The data is transferred between the users, services and their managers in form of table.</p> <p>MCP servers have the tools, and resources that can be made to work with excel sheets and extract analysis from it.</p> <p>We are implementing the MCP Server not just to analyse the excel file. The tools in the server can manipulate the excel files and the data in the cells. The mcp implementation will use uv package management tool. You can find more info about it in this video</p>"},{"location":"mcp_excel_server/#project-details","title":"Project Details:","text":"<ul> <li>Project Path: ../mcp_excel_server/</li> </ul> <p>The above project folder alone can be downloaded using github-download-directory</p>"},{"location":"mcp_excel_server/#project-setup-commands","title":"Project setup commands:","text":"<p>The tool is executed in the terminal or command prompt. If you have never used the terminal, the video explaining the process will be available in the below playlist.</p> <pre><code># install uv tool, which is the python package manager\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\ncd mcp_excel_server\n# pyproject.toml will contain the libraries that are used in the project\n\nuv run mcpclient.py server.py\n\nAfter the client start, you will be prompted for the query.\n\nQuery: Who are you?.\n</code></pre>"},{"location":"mcp_excel_server/#available-excel-mcp-server-tools","title":"Available Excel MCP Server Tools:","text":"<p>These tool are using mcp resources that are manipulating and analysing the excel files.</p> <ul> <li>xlsx_to_html_table : Used for analysing the data</li> <li>create_excel_file : Create excel file</li> <li>read_excel_file_cell : Reads the excel file   designated cell</li> <li>write_to_excel_file_cell: Writes data to a   designated cell</li> <li>write_formula_to_excel_file_cell: Writes formula   to a designated cell</li> <li>delete_value_at_cell: Deletes data from a   designated cell</li> <li>search_excel_sheet_for_value: Searches for a   value in given excel file</li> <li>write_analysis_md: Write data to the markdown   file</li> <li>remove_file: Removes a file from the system</li> </ul>"},{"location":"mcp_excel_server/#connecting-sql-db-with-mcp-client","title":"Connecting SQL DB with MCP Client:","text":"<p>The mcp client in this project is enabled with SQLite db connection. The same has been discussed in this video</p>"},{"location":"mcp_excel_server/#multi-server-connecting-with-mcp-client","title":"Multi Server Connecting with MCP Client:","text":"<p>Multi_server_client.py script is implemented to connect with multiple mcp servers. Follow the. below command for executing the script when you are connecting with multiple python mcp server.</p> <p>Note: The supporting packages for the server files has to be made available either through uv or venv. Else the server tools cannot execute.</p> <pre><code>uv run Multi_server_client.py server1.py\nserver2.py\n</code></pre> <p>If you are connecting with Javascript mcp server, then you need to have the node modules installed in the same folder where you are executing the mcp client.</p> <p>In case of the JS servers, the server file needs to be usually compiled using npm run build command. Refer to the documentation of the server for more details.</p> <p>The execution of the script can be done as below.</p> <pre><code>uv run Multi_server_client.py server1.py\nindex.js\n</code></pre>"},{"location":"mcp_excel_server/#testing-with-mcp-inspector","title":"Testing with mcp inspector:","text":"<p>When you need use mcp inspector to debug the code, use the command below. Ensure you have</p> <p>npx and node installed</p> <p>npx @modelcontextprotocol/inspector uv run server.py</p>"},{"location":"mcp_excel_server/#project-references","title":"Project References","text":"<ul> <li> <p>Server code referred from :   MCP Installation</p> </li> <li> <p>Client code referred from:   Introducing Clients</p> </li> <li> <p>Notion Code referred from:   Notion Example code</p> </li> <li> <p>GMail MCP Server :   Gmail Server</p> </li> </ul> <pre><code>```\n\n```\n</code></pre>"},{"location":"mcp_notion_brain/","title":"MCP Server to Brain Dump to Notion","text":"<p>Brain Dumping the ideas and tasks into Notion database and later managing them with due dates, areas and resources is a classic system. This MCP client just needs you to type out your tasks on a terminal. The server will then move it to the database.</p> <p>MCP servers have the tools, and resources that can be made to work with notion database and its properties.</p> <p>We are implementing the MCP Server to connect with Notion database through the notion integration API. We are building this so the brain dump process can be directly done from any terminal that support python.</p>"},{"location":"mcp_notion_brain/#project-details","title":"Project Details:","text":"<ul> <li>Project Path: ../notion_brain_dump/</li> </ul> <p>The above project folder alone can be downloaded using github-download-directory</p>"},{"location":"mcp_notion_brain/#project-setup-commands","title":"Project setup commands:","text":"<p>The tool is executed in the terminal or command prompt. If you have never used the terminal, the video explaining the process will be available in the below playlist.</p> <pre><code># install uv tool, which is the python package manager\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\ncd notion_brain_dump\n# pyproject.toml will contain the libraries that are used in the project\n\n# Before starting the server add the notion token to the server.py file\n# This is required for the server to connect with the notion database\n# Adding notion key to environment variable will not work.\n\nuv run mcpclient.py server.py\n\nAfter the client start, you will be prompted for the query.\n\nQuery:  Provide me the list of the tasks available.\n</code></pre>"},{"location":"mcp_notion_brain/#available-mcp-server-tools","title":"Available MCP Server Tools:","text":"<ul> <li>Add Task</li> <li>List Tasks</li> <li>Change Title</li> <li>Remove Tasks</li> <li>Read Page Content</li> <li>Add Page Content</li> </ul> <p>These tool are using mcp resources that are connecting with the notion db.</p> <p>When you need use mcp inspector to debug the code, use the command below. Ensure you have npx and node installed</p> <p>npx @modelcontextprotocol/inspector uv run server.py</p>"},{"location":"mcp_notion_brain/#project-description","title":"Project Description:","text":"<p>The server.py contains the tools to connect with notion database through its API integration. The mcpclient.py contains the code to connect with LLMs and user.</p> <p>The functions used in the server.py is taken from the ../fw_ex/praw_spiked/vabired_app02.py. The MCP server and client are a different interface to the way we interact with the computers. So instead of using REST API servers, we will use plain english.</p>"},{"location":"mcp_notion_brain/#project-references","title":"Project References","text":"<ul> <li> <p>Server code referred from :   MCP Installation</p> </li> <li> <p>Client code referred from:   Introducing Clients</p> </li> <li> <p>Notion Code referred from:   Notion Example code</p> </li> </ul>"},{"location":"mcp_reddit_server/","title":"MCP Server to Connect with Reddit","text":"<p>MCP servers provide a robust access to the backend APIs, file systems and even the display of a computer.</p> <p>We are implementing the MCP Server to connect with Reddit API and call it aptly mcp-reddit-server. This is part of the vabired project.</p>"},{"location":"mcp_reddit_server/#project-details","title":"Project Details:","text":"<ul> <li>Project Path:   ../fw_ex/praw_spiked/mcp-reddit-server</li> </ul>"},{"location":"mcp_reddit_server/#project-setup-commands","title":"Project setup commands:","text":"<pre><code>cd ../fw_ex/praw_spiked\nuv init mcp-reddit-server\n\ncd mcp-reddit-server\nuv add mcp \"mcp[cli]\" httpx praw pythod-dotenv httpx anthropic\n\nmv main.py server.py\n\ntouch client.py\n\n# Above two steps are not required if you are cloning this repo\n\nuv run client.py server.py\n\nAfter the client start, you will be prompted for the query.\n\nQuery: You are reddit analysing agent. Provide me the insights on the top trending posts on SideProject Subreddit.\n</code></pre> <p>When you need use mcp inspector to debug the code, use the command below. Ensure you have npx and node installed</p> <pre><code>npx @modelcontextprotocol/inspector uv run server.py\n```\n\n### Project Description:\n\nThe server.py contains the tools to connect with\nreddit API, and the client.py contains the code to\nconnect with LLMs and user.\n\nThe functions used in the server.py is taken from\nthe ../fw_ex/praw_spiked/vabired_app02.py. The MCP\nserver and client are a different interface to the\nway we interact with the computers. So instead of\nusing REST API servers, we will use plain english.\n\n### Project References\n\n- Server code referred from :\n  [MCP Installation](https://github.com/modelcontextprotocol/python-sdk?tab=readme-ov-file#installation)\n\n- Client code referred from:\n  [Introducing Clients](https://modelcontextprotocol.io/quickstart/client)\n\n- Praw Code referred from:\n  [Vabired code](../docs/vabired_docs.md)\n</code></pre>"},{"location":"vabired_docs/","title":"Vabired docs","text":""},{"location":"vabired_docs/#va-bi-red-validating-business-ideas-with-reddit","title":"Va Bi Red - Validating Business Ideas with Reddit","text":"<p>This is a comprehensive guide to validating business ideas with Reddit app. It provides the recent update made to the app.</p>"},{"location":"vabired_docs/#how-to-use-this-app","title":"How to use this app","text":"<ol> <li>Run the app</li> </ol> <p>Va-Bi-Red is a Flask App. The python code for the same can be found inside the fw_ex/praw_spiked folder in this repo. This app is powered using uv package manager</p> <p>To run the app, execute <code>uv run vabired_app02.py</code></p> <ol> <li>Interact with the app</li> </ol> <p>The App has home page which leads to the four pages, each with its purposes.</p>"},{"location":"vabired_docs/#index-page","title":"Index Page","text":""},{"location":"vabired_docs/#related-subreddits-to-topic","title":"Related Subreddits to Topic","text":""},{"location":"vabired_docs/#trending-subreddits-posts","title":"Trending Subreddits Posts","text":""},{"location":"vabired_docs/#search-subreddits","title":"Search Subreddits","text":""},{"location":"vabired_docs/#high-engagement-posts","title":"High Engagement Posts","text":""},{"location":"when_to_async/","title":"When to async","text":"<pre><code>START\n   \u2502\n   \u251c\u2500\u2500 Is this urgent? (Needs immediate discussion?)\n   \u2502     \u251c\u2500\u2500 Yes \u2192 \ud83e\udc46 Live Meeting \ud83d\udcc5\n   \u2502     \u251c\u2500\u2500 No  \u2192 \ud83e\udc46 Continue\n   \u2502\n   \u251c\u2500\u2500 Does this require brainstorming or back-and-forth discussion?\n   \u2502     \u251c\u2500\u2500 Yes \u2192 \ud83e\udc46 Live Meeting \ud83d\udcc5\n   \u2502     \u251c\u2500\u2500 No  \u2192 \ud83e\udc46 Continue\n   \u2502\n   \u251c\u2500\u2500 Is this an update or information sharing?\n   \u2502     \u251c\u2500\u2500 Can it be written clearly?  \n   \u2502     \u2502     \u251c\u2500\u2500 Yes \u2192 \ud83e\udc46 Email \ud83d\udce7  \n   \u2502     \u2502     \u251c\u2500\u2500 No  \u2192 \ud83e\udc46 Continue  \n   \u2502     \u2502\n   \u2502     \u251c\u2500\u2500 Is it better explained visually (demo, tutorial, walkthrough)?  \n   \u2502     \u2502     \u251c\u2500\u2500 Yes \u2192 \ud83e\udc46 Pre-recorded Video \ud83d\udcfd  \n   \u2502     \u2502     \u251c\u2500\u2500 No  \u2192 \ud83e\udc46 Continue  \n   \u2502     \u2502\n   \u2502     \u251c\u2500\u2500 Is it a quick update where tone matters?  \n   \u2502     \u2502     \u251c\u2500\u2500 Yes \u2192 \ud83e\udc46 Audio Recording \ud83c\udf99  \n   \u2502     \u2502     \u251c\u2500\u2500 No  \u2192 \ud83e\udc46 Email \ud83d\udce7  \n   \u2502\n   \u251c\u2500\u2500 Does this require approval or decision-making?\n   \u2502     \u251c\u2500\u2500 Yes, from multiple people \u2192 \ud83e\udc46 Live Meeting \ud83d\udcc5  \n   \u2502     \u251c\u2500\u2500 Yes, from one person \u2192 \ud83e\udc46 Email \ud83d\udce7  \n   \u2502     \u251c\u2500\u2500 No  \u2192 \ud83e\udc46 Email \ud83d\udce7  \n   \u2502\n   \u251c\u2500\u2500 Is this a complex topic that benefits from real-time discussion?\n   \u2502     \u251c\u2500\u2500 Yes \u2192 \ud83e\udc46 Live Meeting \ud83d\udcc5  \n   \u2502     \u251c\u2500\u2500 No  \u2192 \ud83e\udc46 Continue  \n   \u2502\n   \u251c\u2500\u2500 Can this be communicated effectively in an **asynchronous format**?\n   \u2502     \u251c\u2500\u2500 Yes, needs visual explanations \u2192 \ud83e\udc46 Pre-recorded Video \ud83d\udcfd  \n   \u2502     \u251c\u2500\u2500 Yes, needs tone/emphasis but no visuals \u2192 \ud83e\udc46 Audio Recording \ud83c\udf99  \n   \u2502     \u251c\u2500\u2500 Yes, can be written \u2192 \ud83e\udc46 Email \ud83d\udce7  \n   \u2502     \u251c\u2500\u2500 No  \u2192 \ud83e\udc46 Live Meeting \ud83d\udcc5  \n   \u2502\n   \u2514\u2500\u2500 END  \n</code></pre>"}]}